{"ast":null,"code":"import _slicedToArray from \"C:/projects/custom/angular12_table/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"C:/projects/custom/angular12_table/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/projects/custom/angular12_table/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { createAction, props, isNgrxMockEnvironment, select, Store, ACTIVE_RUNTIME_CHECKS, createSelector } from '@ngrx/store';\nimport { InjectionToken, isDevMode, NgModule, ErrorHandler, Inject } from '@angular/core';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd, Router } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n/**\n * An action dispatched when a router navigation request is fired.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\nimport * as ɵngcc2 from '@angular/router';\nvar ROUTER_REQUEST = '@ngrx/router-store/request';\nvar routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\n\nvar ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nvar routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\n\nvar ROUTER_CANCEL = '@ngrx/router-store/cancel';\nvar routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\n\nvar ROUTER_ERROR = '@ngrx/router-store/error';\nvar routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\n\nvar ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nvar routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\n\nfunction routerReducer(state, action) {\n  // Allow compilation with strictFunctionTypes - ref: #1344\n  var routerAction = action;\n\n  switch (routerAction.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: routerAction.payload.routerState,\n        navigationId: routerAction.payload.event.id\n      };\n\n    default:\n      return state;\n  }\n}\n\nvar RouterStateSerializer = function RouterStateSerializer() {\n  _classCallCheck(this, RouterStateSerializer);\n};\n\nvar DefaultRouterStateSerializer = /*#__PURE__*/function () {\n  function DefaultRouterStateSerializer() {\n    _classCallCheck(this, DefaultRouterStateSerializer);\n  }\n\n  _createClass(DefaultRouterStateSerializer, [{\n    key: \"serialize\",\n    value: function serialize(routerState) {\n      return {\n        root: this.serializeRoute(routerState.root),\n        url: routerState.url\n      };\n    }\n  }, {\n    key: \"serializeRoute\",\n    value: function serializeRoute(route) {\n      var _this = this;\n\n      var children = route.children.map(function (c) {\n        return _this.serializeRoute(c);\n      });\n      return {\n        params: route.params,\n        paramMap: route.paramMap,\n        data: route.data,\n        url: route.url,\n        outlet: route.outlet,\n        routeConfig: route.routeConfig ? {\n          component: route.routeConfig.component,\n          path: route.routeConfig.path,\n          pathMatch: route.routeConfig.pathMatch,\n          redirectTo: route.routeConfig.redirectTo,\n          outlet: route.routeConfig.outlet\n        } : null,\n        queryParams: route.queryParams,\n        queryParamMap: route.queryParamMap,\n        fragment: route.fragment,\n        component: route.routeConfig ? route.routeConfig.component : undefined,\n        root: undefined,\n        parent: undefined,\n        firstChild: children[0],\n        pathFromRoot: undefined,\n        children: children\n      };\n    }\n  }]);\n\n  return DefaultRouterStateSerializer;\n}();\n\nvar MinimalRouterStateSerializer = /*#__PURE__*/function () {\n  function MinimalRouterStateSerializer() {\n    _classCallCheck(this, MinimalRouterStateSerializer);\n  }\n\n  _createClass(MinimalRouterStateSerializer, [{\n    key: \"serialize\",\n    value: function serialize(routerState) {\n      return {\n        root: this.serializeRoute(routerState.root),\n        url: routerState.url\n      };\n    }\n  }, {\n    key: \"serializeRoute\",\n    value: function serializeRoute(route) {\n      var _this2 = this;\n\n      var children = route.children.map(function (c) {\n        return _this2.serializeRoute(c);\n      });\n      return {\n        params: route.params,\n        data: route.data,\n        url: route.url,\n        outlet: route.outlet,\n        routeConfig: route.routeConfig ? {\n          path: route.routeConfig.path,\n          pathMatch: route.routeConfig.pathMatch,\n          redirectTo: route.routeConfig.redirectTo,\n          outlet: route.routeConfig.outlet\n        } : null,\n        queryParams: route.queryParams,\n        fragment: route.fragment,\n        firstChild: children[0],\n        children: children\n      };\n    }\n  }]);\n\n  return MinimalRouterStateSerializer;\n}();\n\nvar NavigationActionTiming;\n\n(function (NavigationActionTiming) {\n  NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n  NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\n\nvar _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\n\nvar ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nvar DEFAULT_ROUTER_FEATURENAME = 'router';\n\nfunction _createRouterConfig(config) {\n  return Object.assign({\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: MinimalRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation\n  }, config);\n}\n\nvar RouterTrigger;\n\n(function (RouterTrigger) {\n  RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n  RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n  RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\n\n\nvar StoreRouterConnectingModule = /*#__PURE__*/function () {\n  function StoreRouterConnectingModule(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n    _classCallCheck(this, StoreRouterConnectingModule);\n\n    this.store = store;\n    this.router = router;\n    this.serializer = serializer;\n    this.errorHandler = errorHandler;\n    this.config = config;\n    this.activeRuntimeChecks = activeRuntimeChecks;\n    this.lastEvent = null;\n    this.routerState = null;\n    this.trigger = RouterTrigger.NONE;\n    this.stateKey = this.config.stateKey;\n\n    if (!isNgrxMockEnvironment() && isDevMode() && ((activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictActionSerializability) || (activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictStateSerializability)) && this.serializer instanceof DefaultRouterStateSerializer) {\n      console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' + 'with the DefaultRouterStateSerializer. The default serializer ' + 'has an unserializable router state and actions that are not serializable. ' + 'To use the serializability runtime checks either use ' + 'the MinimalRouterStateSerializer or implement a custom router state serializer. ' + 'This also applies to Ivy with immutability runtime checks.');\n    }\n\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n\n  _createClass(StoreRouterConnectingModule, [{\n    key: \"setUpStoreStateListener\",\n    value: function setUpStoreStateListener() {\n      var _this3 = this;\n\n      this.store.pipe(select(this.stateKey), withLatestFrom(this.store)).subscribe(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            routerStoreState = _ref2[0],\n            storeState = _ref2[1];\n\n        _this3.navigateIfNeeded(routerStoreState, storeState);\n      });\n    }\n  }, {\n    key: \"navigateIfNeeded\",\n    value: function navigateIfNeeded(routerStoreState, storeState) {\n      var _this4 = this;\n\n      if (!routerStoreState || !routerStoreState.state) {\n        return;\n      }\n\n      if (this.trigger === RouterTrigger.ROUTER) {\n        return;\n      }\n\n      if (this.lastEvent instanceof NavigationStart) {\n        return;\n      }\n\n      var url = routerStoreState.state.url;\n\n      if (!isSameUrl(this.router.url, url)) {\n        this.storeState = storeState;\n        this.trigger = RouterTrigger.STORE;\n        this.router.navigateByUrl(url).catch(function (error) {\n          _this4.errorHandler.handleError(error);\n        });\n      }\n    }\n  }, {\n    key: \"setUpRouterEventsListener\",\n    value: function setUpRouterEventsListener() {\n      var _this5 = this;\n\n      var dispatchNavLate = this.config.navigationActionTiming === NavigationActionTiming.PostActivation;\n      var routesRecognized;\n      this.router.events.pipe(withLatestFrom(this.store)).subscribe(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            event = _ref4[0],\n            storeState = _ref4[1];\n\n        _this5.lastEvent = event;\n\n        if (event instanceof NavigationStart) {\n          _this5.routerState = _this5.serializer.serialize(_this5.router.routerState.snapshot);\n\n          if (_this5.trigger !== RouterTrigger.STORE) {\n            _this5.storeState = storeState;\n\n            _this5.dispatchRouterRequest(event);\n          }\n        } else if (event instanceof RoutesRecognized) {\n          routesRecognized = event;\n\n          if (!dispatchNavLate && _this5.trigger !== RouterTrigger.STORE) {\n            _this5.dispatchRouterNavigation(event);\n          }\n        } else if (event instanceof NavigationCancel) {\n          _this5.dispatchRouterCancel(event);\n\n          _this5.reset();\n        } else if (event instanceof NavigationError) {\n          _this5.dispatchRouterError(event);\n\n          _this5.reset();\n        } else if (event instanceof NavigationEnd) {\n          if (_this5.trigger !== RouterTrigger.STORE) {\n            if (dispatchNavLate) {\n              _this5.dispatchRouterNavigation(routesRecognized);\n            }\n\n            _this5.dispatchRouterNavigated(event);\n          }\n\n          _this5.reset();\n        }\n      });\n    }\n  }, {\n    key: \"dispatchRouterRequest\",\n    value: function dispatchRouterRequest(event) {\n      this.dispatchRouterAction(ROUTER_REQUEST, {\n        event: event\n      });\n    }\n  }, {\n    key: \"dispatchRouterNavigation\",\n    value: function dispatchRouterNavigation(lastRoutesRecognized) {\n      var nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n      this.dispatchRouterAction(ROUTER_NAVIGATION, {\n        routerState: nextRouterState,\n        event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState)\n      });\n    }\n  }, {\n    key: \"dispatchRouterCancel\",\n    value: function dispatchRouterCancel(event) {\n      this.dispatchRouterAction(ROUTER_CANCEL, {\n        storeState: this.storeState,\n        event: event\n      });\n    }\n  }, {\n    key: \"dispatchRouterError\",\n    value: function dispatchRouterError(event) {\n      this.dispatchRouterAction(ROUTER_ERROR, {\n        storeState: this.storeState,\n        event: new NavigationError(event.id, event.url, \"\".concat(event))\n      });\n    }\n  }, {\n    key: \"dispatchRouterNavigated\",\n    value: function dispatchRouterNavigated(event) {\n      var routerState = this.serializer.serialize(this.router.routerState.snapshot);\n      this.dispatchRouterAction(ROUTER_NAVIGATED, {\n        event: event,\n        routerState: routerState\n      });\n    }\n  }, {\n    key: \"dispatchRouterAction\",\n    value: function dispatchRouterAction(type, payload) {\n      this.trigger = RouterTrigger.ROUTER;\n\n      try {\n        this.store.dispatch({\n          type: type,\n          payload: Object.assign(Object.assign({\n            routerState: this.routerState\n          }, payload), {\n            event: this.config.routerState === 0\n            /* Full */\n            ? payload.event : {\n              id: payload.event.id,\n              url: payload.event.url,\n              // safe, as it will just be `undefined` for non-NavigationEnd router events\n              urlAfterRedirects: payload.event.urlAfterRedirects\n            }\n          })\n        });\n      } finally {\n        this.trigger = RouterTrigger.NONE;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.trigger = RouterTrigger.NONE;\n      this.storeState = null;\n      this.routerState = null;\n    }\n  }], [{\n    key: \"forRoot\",\n    value: function forRoot() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: StoreRouterConnectingModule,\n        providers: [{\n          provide: _ROUTER_CONFIG,\n          useValue: config\n        }, {\n          provide: ROUTER_CONFIG,\n          useFactory: _createRouterConfig,\n          deps: [_ROUTER_CONFIG]\n        }, {\n          provide: RouterStateSerializer,\n          useClass: config.serializer ? config.serializer : config.routerState === 0\n          /* Full */\n          ? DefaultRouterStateSerializer : MinimalRouterStateSerializer\n        }]\n      };\n    }\n  }]);\n\n  return StoreRouterConnectingModule;\n}();\n\nStoreRouterConnectingModule.ɵfac = function StoreRouterConnectingModule_Factory(t) {\n  return new (t || StoreRouterConnectingModule)(ɵngcc0.ɵɵinject(ɵngcc1.Store), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(RouterStateSerializer), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(ROUTER_CONFIG), ɵngcc0.ɵɵinject(ACTIVE_RUNTIME_CHECKS));\n};\n\nStoreRouterConnectingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: StoreRouterConnectingModule\n});\nStoreRouterConnectingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n/** @nocollapse */\n\nStoreRouterConnectingModule.ctorParameters = function () {\n  return [{\n    type: Store\n  }, {\n    type: Router\n  }, {\n    type: RouterStateSerializer\n  }, {\n    type: ErrorHandler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [ROUTER_CONFIG]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [ACTIVE_RUNTIME_CHECKS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreRouterConnectingModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: ɵngcc1.Store\n    }, {\n      type: ɵngcc2.Router\n    }, {\n      type: RouterStateSerializer\n    }, {\n      type: ɵngcc0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ROUTER_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ACTIVE_RUNTIME_CHECKS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\n\n\nfunction isSameUrl(first, second) {\n  return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\n\nfunction stripTrailingSlash(text) {\n  if (text.length > 0 && text[text.length - 1] === '/') {\n    return text.substring(0, text.length - 1);\n  }\n\n  return text;\n}\n\nfunction getSelectors(selectState) {\n  var selectRouterState = createSelector(selectState, function (router) {\n    return router && router.state;\n  });\n  var selectRootRoute = createSelector(selectRouterState, function (routerState) {\n    return routerState && routerState.root;\n  });\n  var selectCurrentRoute = createSelector(selectRootRoute, function (rootRoute) {\n    if (!rootRoute) {\n      return undefined;\n    }\n\n    var route = rootRoute;\n\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n\n    return route;\n  });\n  var selectFragment = createSelector(selectRootRoute, function (route) {\n    return route && route.fragment;\n  });\n  var selectQueryParams = createSelector(selectRootRoute, function (route) {\n    return route && route.queryParams;\n  });\n\n  var selectQueryParam = function selectQueryParam(param) {\n    return createSelector(selectQueryParams, function (params) {\n      return params && params[param];\n    });\n  };\n\n  var selectRouteParams = createSelector(selectCurrentRoute, function (route) {\n    return route && route.params;\n  });\n\n  var selectRouteParam = function selectRouteParam(param) {\n    return createSelector(selectRouteParams, function (params) {\n      return params && params[param];\n    });\n  };\n\n  var selectRouteData = createSelector(selectCurrentRoute, function (route) {\n    return route && route.data;\n  });\n  var selectUrl = createSelector(selectRouterState, function (routerState) {\n    return routerState && routerState.url;\n  });\n  return {\n    selectCurrentRoute: selectCurrentRoute,\n    selectFragment: selectFragment,\n    selectQueryParams: selectQueryParams,\n    selectQueryParam: selectQueryParam,\n    selectRouteParams: selectRouteParams,\n    selectRouteParam: selectRouteParam,\n    selectRouteData: selectRouteData,\n    selectUrl: selectUrl\n  };\n}\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULT_ROUTER_FEATURENAME, DefaultRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, getSelectors, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction, _ROUTER_CONFIG as ɵa, _createRouterConfig as ɵb }; //# sourceMappingURL=ngrx-router-store.js.map","map":{"version":3,"sources":["C:/projects/custom/angular12_table/node_modules/@ngrx/router-store/fesm2015/ngrx-router-store.js"],"names":["createAction","props","isNgrxMockEnvironment","select","Store","ACTIVE_RUNTIME_CHECKS","createSelector","InjectionToken","isDevMode","NgModule","ErrorHandler","Inject","NavigationStart","RoutesRecognized","NavigationCancel","NavigationError","NavigationEnd","Router","withLatestFrom","ɵngcc0","ɵngcc1","ɵngcc2","ROUTER_REQUEST","routerRequestAction","ROUTER_NAVIGATION","routerNavigationAction","ROUTER_CANCEL","routerCancelAction","ROUTER_ERROR","routerErrorAction","ROUTER_NAVIGATED","routerNavigatedAction","routerReducer","state","action","routerAction","type","payload","routerState","navigationId","event","id","RouterStateSerializer","DefaultRouterStateSerializer","root","serializeRoute","url","route","children","map","c","params","paramMap","data","outlet","routeConfig","component","path","pathMatch","redirectTo","queryParams","queryParamMap","fragment","undefined","parent","firstChild","pathFromRoot","MinimalRouterStateSerializer","NavigationActionTiming","_ROUTER_CONFIG","ROUTER_CONFIG","DEFAULT_ROUTER_FEATURENAME","_createRouterConfig","config","Object","assign","stateKey","serializer","navigationActionTiming","PreActivation","RouterTrigger","StoreRouterConnectingModule","store","router","errorHandler","activeRuntimeChecks","lastEvent","trigger","NONE","strictActionSerializability","strictStateSerializability","console","warn","setUpStoreStateListener","setUpRouterEventsListener","pipe","subscribe","routerStoreState","storeState","navigateIfNeeded","ROUTER","isSameUrl","STORE","navigateByUrl","catch","error","handleError","dispatchNavLate","PostActivation","routesRecognized","events","serialize","snapshot","dispatchRouterRequest","dispatchRouterNavigation","dispatchRouterCancel","reset","dispatchRouterError","dispatchRouterNavigated","dispatchRouterAction","lastRoutesRecognized","nextRouterState","urlAfterRedirects","dispatch","ngModule","providers","provide","useValue","useFactory","deps","useClass","ɵfac","StoreRouterConnectingModule_Factory","t","ɵɵinject","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ctorParameters","decorators","args","ngDevMode","ɵsetClassMetadata","first","second","stripTrailingSlash","text","length","substring","getSelectors","selectState","selectRouterState","selectRootRoute","selectCurrentRoute","rootRoute","selectFragment","selectQueryParams","selectQueryParam","param","selectRouteParams","selectRouteParam","selectRouteData","selectUrl","ɵa","ɵb"],"mappings":"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","sourcesContent":["import { createAction, props, isNgrxMockEnvironment, select, Store, ACTIVE_RUNTIME_CHECKS, createSelector } from '@ngrx/store';\nimport { InjectionToken, isDevMode, NgModule, ErrorHandler, Inject } from '@angular/core';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd, Router } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\nimport * as ɵngcc2 from '@angular/router';\nconst ROUTER_REQUEST = '@ngrx/router-store/request';\nconst routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\nconst ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nconst routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\nconst ROUTER_CANCEL = '@ngrx/router-store/cancel';\nconst routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\nconst ROUTER_ERROR = '@ngrx/router-store/error';\nconst routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nconst ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nconst routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\n\nfunction routerReducer(state, action) {\n    // Allow compilation with strictFunctionTypes - ref: #1344\n    const routerAction = action;\n    switch (routerAction.type) {\n        case ROUTER_NAVIGATION:\n        case ROUTER_ERROR:\n        case ROUTER_CANCEL:\n            return {\n                state: routerAction.payload.routerState,\n                navigationId: routerAction.payload.event.id,\n            };\n        default:\n            return state;\n    }\n}\n\nclass RouterStateSerializer {\n}\n\nclass DefaultRouterStateSerializer {\n    serialize(routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    }\n    serializeRoute(route) {\n        const children = route.children.map((c) => this.serializeRoute(c));\n        return {\n            params: route.params,\n            paramMap: route.paramMap,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: route.routeConfig\n                ? {\n                    component: route.routeConfig.component,\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                }\n                : null,\n            queryParams: route.queryParams,\n            queryParamMap: route.queryParamMap,\n            fragment: route.fragment,\n            component: (route.routeConfig\n                ? route.routeConfig.component\n                : undefined),\n            root: undefined,\n            parent: undefined,\n            firstChild: children[0],\n            pathFromRoot: undefined,\n            children,\n        };\n    }\n}\n\nclass MinimalRouterStateSerializer {\n    serialize(routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    }\n    serializeRoute(route) {\n        const children = route.children.map((c) => this.serializeRoute(c));\n        return {\n            params: route.params,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: route.routeConfig\n                ? {\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                }\n                : null,\n            queryParams: route.queryParams,\n            fragment: route.fragment,\n            firstChild: children[0],\n            children,\n        };\n    }\n}\n\nvar NavigationActionTiming;\n(function (NavigationActionTiming) {\n    NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n    NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\nconst _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\nconst ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nconst DEFAULT_ROUTER_FEATURENAME = 'router';\nfunction _createRouterConfig(config) {\n    return Object.assign({ stateKey: DEFAULT_ROUTER_FEATURENAME, serializer: MinimalRouterStateSerializer, navigationActionTiming: NavigationActionTiming.PreActivation }, config);\n}\nvar RouterTrigger;\n(function (RouterTrigger) {\n    RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n    RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n    RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nclass StoreRouterConnectingModule {\n    constructor(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n        this.store = store;\n        this.router = router;\n        this.serializer = serializer;\n        this.errorHandler = errorHandler;\n        this.config = config;\n        this.activeRuntimeChecks = activeRuntimeChecks;\n        this.lastEvent = null;\n        this.routerState = null;\n        this.trigger = RouterTrigger.NONE;\n        this.stateKey = this.config.stateKey;\n        if (!isNgrxMockEnvironment() &&\n            isDevMode() &&\n            ((activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictActionSerializability) ||\n                (activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictStateSerializability)) &&\n            this.serializer instanceof DefaultRouterStateSerializer) {\n            console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' +\n                'with the DefaultRouterStateSerializer. The default serializer ' +\n                'has an unserializable router state and actions that are not serializable. ' +\n                'To use the serializability runtime checks either use ' +\n                'the MinimalRouterStateSerializer or implement a custom router state serializer. ' +\n                'This also applies to Ivy with immutability runtime checks.');\n        }\n        this.setUpStoreStateListener();\n        this.setUpRouterEventsListener();\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: StoreRouterConnectingModule,\n            providers: [\n                { provide: _ROUTER_CONFIG, useValue: config },\n                {\n                    provide: ROUTER_CONFIG,\n                    useFactory: _createRouterConfig,\n                    deps: [_ROUTER_CONFIG],\n                },\n                {\n                    provide: RouterStateSerializer,\n                    useClass: config.serializer\n                        ? config.serializer\n                        : config.routerState === 0 /* Full */\n                            ? DefaultRouterStateSerializer\n                            : MinimalRouterStateSerializer,\n                },\n            ],\n        };\n    }\n    setUpStoreStateListener() {\n        this.store\n            .pipe(select(this.stateKey), withLatestFrom(this.store))\n            .subscribe(([routerStoreState, storeState]) => {\n            this.navigateIfNeeded(routerStoreState, storeState);\n        });\n    }\n    navigateIfNeeded(routerStoreState, storeState) {\n        if (!routerStoreState || !routerStoreState.state) {\n            return;\n        }\n        if (this.trigger === RouterTrigger.ROUTER) {\n            return;\n        }\n        if (this.lastEvent instanceof NavigationStart) {\n            return;\n        }\n        const url = routerStoreState.state.url;\n        if (!isSameUrl(this.router.url, url)) {\n            this.storeState = storeState;\n            this.trigger = RouterTrigger.STORE;\n            this.router.navigateByUrl(url).catch((error) => {\n                this.errorHandler.handleError(error);\n            });\n        }\n    }\n    setUpRouterEventsListener() {\n        const dispatchNavLate = this.config.navigationActionTiming ===\n            NavigationActionTiming.PostActivation;\n        let routesRecognized;\n        this.router.events\n            .pipe(withLatestFrom(this.store))\n            .subscribe(([event, storeState]) => {\n            this.lastEvent = event;\n            if (event instanceof NavigationStart) {\n                this.routerState = this.serializer.serialize(this.router.routerState.snapshot);\n                if (this.trigger !== RouterTrigger.STORE) {\n                    this.storeState = storeState;\n                    this.dispatchRouterRequest(event);\n                }\n            }\n            else if (event instanceof RoutesRecognized) {\n                routesRecognized = event;\n                if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n                    this.dispatchRouterNavigation(event);\n                }\n            }\n            else if (event instanceof NavigationCancel) {\n                this.dispatchRouterCancel(event);\n                this.reset();\n            }\n            else if (event instanceof NavigationError) {\n                this.dispatchRouterError(event);\n                this.reset();\n            }\n            else if (event instanceof NavigationEnd) {\n                if (this.trigger !== RouterTrigger.STORE) {\n                    if (dispatchNavLate) {\n                        this.dispatchRouterNavigation(routesRecognized);\n                    }\n                    this.dispatchRouterNavigated(event);\n                }\n                this.reset();\n            }\n        });\n    }\n    dispatchRouterRequest(event) {\n        this.dispatchRouterAction(ROUTER_REQUEST, { event });\n    }\n    dispatchRouterNavigation(lastRoutesRecognized) {\n        const nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n        this.dispatchRouterAction(ROUTER_NAVIGATION, {\n            routerState: nextRouterState,\n            event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState),\n        });\n    }\n    dispatchRouterCancel(event) {\n        this.dispatchRouterAction(ROUTER_CANCEL, {\n            storeState: this.storeState,\n            event,\n        });\n    }\n    dispatchRouterError(event) {\n        this.dispatchRouterAction(ROUTER_ERROR, {\n            storeState: this.storeState,\n            event: new NavigationError(event.id, event.url, `${event}`),\n        });\n    }\n    dispatchRouterNavigated(event) {\n        const routerState = this.serializer.serialize(this.router.routerState.snapshot);\n        this.dispatchRouterAction(ROUTER_NAVIGATED, { event, routerState });\n    }\n    dispatchRouterAction(type, payload) {\n        this.trigger = RouterTrigger.ROUTER;\n        try {\n            this.store.dispatch({\n                type,\n                payload: Object.assign(Object.assign({ routerState: this.routerState }, payload), { event: this.config.routerState === 0 /* Full */\n                        ? payload.event\n                        : {\n                            id: payload.event.id,\n                            url: payload.event.url,\n                            // safe, as it will just be `undefined` for non-NavigationEnd router events\n                            urlAfterRedirects: payload.event\n                                .urlAfterRedirects,\n                        } }),\n            });\n        }\n        finally {\n            this.trigger = RouterTrigger.NONE;\n        }\n    }\n    reset() {\n        this.trigger = RouterTrigger.NONE;\n        this.storeState = null;\n        this.routerState = null;\n    }\n}\nStoreRouterConnectingModule.ɵfac = function StoreRouterConnectingModule_Factory(t) { return new (t || StoreRouterConnectingModule)(ɵngcc0.ɵɵinject(ɵngcc1.Store), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(RouterStateSerializer), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(ROUTER_CONFIG), ɵngcc0.ɵɵinject(ACTIVE_RUNTIME_CHECKS)); };\nStoreRouterConnectingModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StoreRouterConnectingModule });\nStoreRouterConnectingModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n/** @nocollapse */\nStoreRouterConnectingModule.ctorParameters = () => [\n    { type: Store },\n    { type: Router },\n    { type: RouterStateSerializer },\n    { type: ErrorHandler },\n    { type: undefined, decorators: [{ type: Inject, args: [ROUTER_CONFIG,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [ACTIVE_RUNTIME_CHECKS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreRouterConnectingModule, [{\n        type: NgModule,\n        args: [{}]\n    }], function () { return [{ type: ɵngcc1.Store }, { type: ɵngcc2.Router }, { type: RouterStateSerializer }, { type: ɵngcc0.ErrorHandler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [ROUTER_CONFIG]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [ACTIVE_RUNTIME_CHECKS]\n            }] }]; }, null); })();\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\nfunction isSameUrl(first, second) {\n    return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\nfunction stripTrailingSlash(text) {\n    if (text.length > 0 && text[text.length - 1] === '/') {\n        return text.substring(0, text.length - 1);\n    }\n    return text;\n}\n\nfunction getSelectors(selectState) {\n    const selectRouterState = createSelector(selectState, (router) => router && router.state);\n    const selectRootRoute = createSelector(selectRouterState, (routerState) => routerState && routerState.root);\n    const selectCurrentRoute = createSelector(selectRootRoute, (rootRoute) => {\n        if (!rootRoute) {\n            return undefined;\n        }\n        let route = rootRoute;\n        while (route.firstChild) {\n            route = route.firstChild;\n        }\n        return route;\n    });\n    const selectFragment = createSelector(selectRootRoute, (route) => route && route.fragment);\n    const selectQueryParams = createSelector(selectRootRoute, (route) => route && route.queryParams);\n    const selectQueryParam = (param) => createSelector(selectQueryParams, (params) => params && params[param]);\n    const selectRouteParams = createSelector(selectCurrentRoute, (route) => route && route.params);\n    const selectRouteParam = (param) => createSelector(selectRouteParams, (params) => params && params[param]);\n    const selectRouteData = createSelector(selectCurrentRoute, (route) => route && route.data);\n    const selectUrl = createSelector(selectRouterState, (routerState) => routerState && routerState.url);\n    return {\n        selectCurrentRoute,\n        selectFragment,\n        selectQueryParams,\n        selectQueryParam,\n        selectRouteParams,\n        selectRouteParam,\n        selectRouteData,\n        selectUrl,\n    };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_ROUTER_FEATURENAME, DefaultRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, getSelectors, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction, _ROUTER_CONFIG as ɵa, _createRouterConfig as ɵb };\n\n//# sourceMappingURL=ngrx-router-store.js.map"]},"metadata":{},"sourceType":"module"}