{"ast":null,"code":"import _inherits from \"C:/projects/custom/angular11_12_table/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/projects/custom/angular11_12_table/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"C:/projects/custom/angular11_12_table/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/projects/custom/angular11_12_table/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1.action();\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) {}\n\nvar MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\n\nvar MatSnackBarConfig = function MatSnackBarConfig() {\n  _classCallCheck(this, MatSnackBarConfig);\n\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  this.politeness = 'assertive';\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n\n  this.announcementMessage = '';\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n\n  this.duration = 0;\n  /** Data being injected into the child component. */\n\n  this.data = null;\n  /** The horizontal position to place the snack bar. */\n\n  this.horizontalPosition = 'center';\n  /** The vertical position to place the snack bar. */\n\n  this.verticalPosition = 'bottom';\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\n\n\nvar MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\n\nvar MatSnackBarRef = /*#__PURE__*/function () {\n  function MatSnackBarRef(containerInstance, _overlayRef) {\n    var _this = this;\n\n    _classCallCheck(this, MatSnackBarRef);\n\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance; // Dismiss snackbar on action.\n\n    this.onAction().subscribe(function () {\n      return _this.dismiss();\n    });\n\n    containerInstance._onExit.subscribe(function () {\n      return _this._finishDismiss();\n    });\n  }\n  /** Dismisses the snack bar. */\n\n\n  _createClass(MatSnackBarRef, [{\n    key: \"dismiss\",\n    value: function dismiss() {\n      if (!this._afterDismissed.closed) {\n        this.containerInstance.exit();\n      }\n\n      clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n\n  }, {\n    key: \"dismissWithAction\",\n    value: function dismissWithAction() {\n      if (!this._onAction.closed) {\n        this._dismissedByAction = true;\n\n        this._onAction.next();\n\n        this._onAction.complete();\n      }\n\n      clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"closeWithAction\",\n    value: function closeWithAction() {\n      this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n\n  }, {\n    key: \"_dismissAfter\",\n    value: function _dismissAfter(duration) {\n      var _this2 = this;\n\n      // Note that we need to cap the duration to the maximum value for setTimeout, because\n      // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n      this._durationTimeoutId = setTimeout(function () {\n        return _this2.dismiss();\n      }, Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n\n  }, {\n    key: \"_open\",\n    value: function _open() {\n      if (!this._afterOpened.closed) {\n        this._afterOpened.next();\n\n        this._afterOpened.complete();\n      }\n    }\n    /** Cleans up the DOM after closing. */\n\n  }, {\n    key: \"_finishDismiss\",\n    value: function _finishDismiss() {\n      this._overlayRef.dispose();\n\n      if (!this._onAction.closed) {\n        this._onAction.complete();\n      }\n\n      this._afterDismissed.next({\n        dismissedByAction: this._dismissedByAction\n      });\n\n      this._afterDismissed.complete();\n\n      this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n\n  }, {\n    key: \"afterDismissed\",\n    value: function afterDismissed() {\n      return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n\n  }, {\n    key: \"onAction\",\n    value: function onAction() {\n      return this._onAction;\n    }\n  }]);\n\n  return MatSnackBarRef;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\n\nvar SimpleSnackBar = /*#__PURE__*/function () {\n  function SimpleSnackBar(snackBarRef, data) {\n    _classCallCheck(this, SimpleSnackBar);\n\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /** Performs the action on the snack bar. */\n\n\n  _createClass(SimpleSnackBar, [{\n    key: \"action\",\n    value: function action() {\n      this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n\n  }, {\n    key: \"hasAction\",\n    get: function get() {\n      return !!this.data.action;\n    }\n  }]);\n\n  return SimpleSnackBar;\n}();\n\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\n\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-simple-snackbar\"],\n  decls: 3,\n  vars: 2,\n  consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\");\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc2.MatButton],\n  styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nSimpleSnackBar.ctorParameters = function () {\n  return [{\n    type: MatSnackBarRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SNACK_BAR_DATA]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-simple-snackbar'\n      },\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\n\n\nvar matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n\nvar MatSnackBarContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(MatSnackBarContainer, _BasePortalOutlet);\n\n  var _super = _createSuper(MatSnackBarContainer);\n\n  function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, _platform,\n  /** The snack bar configuration. */\n  snackBarConfig) {\n    var _this3;\n\n    _classCallCheck(this, MatSnackBarContainer);\n\n    _this3 = _super.call(this);\n    _this3._ngZone = _ngZone;\n    _this3._elementRef = _elementRef;\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3._platform = _platform;\n    _this3.snackBarConfig = snackBarConfig;\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n\n    _this3._announceDelay = 150;\n    /** Whether the component has been destroyed. */\n\n    _this3._destroyed = false;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n\n    _this3._onAnnounce = new Subject();\n    /** Subject for notifying that the snack bar has exited from view. */\n\n    _this3._onExit = new Subject();\n    /** Subject for notifying that the snack bar has finished entering the view. */\n\n    _this3._onEnter = new Subject();\n    /** The state of the snack bar animations. */\n\n    _this3._animationState = 'void';\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    _this3.attachDomPortal = function (portal) {\n      _this3._assertNotAttached();\n\n      _this3._applySnackBarClasses();\n\n      return _this3._portalOutlet.attachDomPortal(portal);\n    }; // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n\n\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      _this3._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      _this3._live = 'off';\n    } else {\n      _this3._live = 'polite';\n    } // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n\n\n    if (_this3._platform.FIREFOX) {\n      if (_this3._live === 'polite') {\n        _this3._role = 'status';\n      }\n\n      if (_this3._live === 'assertive') {\n        _this3._role = 'alert';\n      }\n    }\n\n    return _this3;\n  }\n  /** Attach a component portal as content to this snack bar container. */\n\n\n  _createClass(MatSnackBarContainer, [{\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n\n  }, {\n    key: \"onAnimationEnd\",\n    value: function onAnimationEnd(event) {\n      var fromState = event.fromState,\n          toState = event.toState;\n\n      if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n        this._completeExit();\n      }\n\n      if (toState === 'visible') {\n        // Note: we shouldn't use `this` inside the zone callback,\n        // because it can cause a memory leak.\n        var onEnter = this._onEnter;\n\n        this._ngZone.run(function () {\n          onEnter.next();\n          onEnter.complete();\n        });\n      }\n    }\n    /** Begin animation of snack bar entrance into view. */\n\n  }, {\n    key: \"enter\",\n    value: function enter() {\n      if (!this._destroyed) {\n        this._animationState = 'visible';\n\n        this._changeDetectorRef.detectChanges();\n\n        this._screenReaderAnnounce();\n      }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n      // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n      // `MatSnackBar.open`).\n      this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has\n      // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n      // test harness.\n\n      this._elementRef.nativeElement.setAttribute('mat-exit', ''); // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n      // long enough to visually read it either, so clear the timeout for announcing.\n\n\n      clearTimeout(this._announceTimeoutId);\n      return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed = true;\n\n      this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n\n  }, {\n    key: \"_completeExit\",\n    value: function _completeExit() {\n      var _this4 = this;\n\n      this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(function () {\n        _this4._onExit.next();\n\n        _this4._onExit.complete();\n      });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n\n  }, {\n    key: \"_applySnackBarClasses\",\n    value: function _applySnackBarClasses() {\n      var element = this._elementRef.nativeElement;\n      var panelClasses = this.snackBarConfig.panelClass;\n\n      if (panelClasses) {\n        if (Array.isArray(panelClasses)) {\n          // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n          panelClasses.forEach(function (cssClass) {\n            return element.classList.add(cssClass);\n          });\n        } else {\n          element.classList.add(panelClasses);\n        }\n      }\n\n      if (this.snackBarConfig.horizontalPosition === 'center') {\n        element.classList.add('mat-snack-bar-center');\n      }\n\n      if (this.snackBarConfig.verticalPosition === 'top') {\n        element.classList.add('mat-snack-bar-top');\n      }\n    }\n    /** Asserts that no content is already attached to the container. */\n\n  }, {\n    key: \"_assertNotAttached\",\n    value: function _assertNotAttached() {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Attempting to attach snack bar content after content is already attached');\n      }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n\n  }, {\n    key: \"_screenReaderAnnounce\",\n    value: function _screenReaderAnnounce() {\n      var _this5 = this;\n\n      if (!this._announceTimeoutId) {\n        this._ngZone.runOutsideAngular(function () {\n          _this5._announceTimeoutId = setTimeout(function () {\n            var inertElement = _this5._elementRef.nativeElement.querySelector('[aria-hidden]');\n\n            var liveElement = _this5._elementRef.nativeElement.querySelector('[aria-live]');\n\n            if (inertElement && liveElement) {\n              // If an element in the snack bar content is focused before being moved\n              // track it and restore focus after moving to the live region.\n              var focusedElement = null;\n\n              if (_this5._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n                focusedElement = document.activeElement;\n              }\n\n              inertElement.removeAttribute('aria-hidden');\n              liveElement.appendChild(inertElement);\n              focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n\n              _this5._onAnnounce.next();\n\n              _this5._onAnnounce.complete();\n            }\n          }, _this5._announceDelay);\n        });\n      }\n    }\n  }]);\n\n  return MatSnackBarContainer;\n}(BasePortalOutlet);\n\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n  return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\n\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"snack-bar-container\"]],\n  viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-snack-bar-container\"],\n  hostVars: 1,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(2, \"div\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    }\n  },\n  directives: [ɵngcc4.CdkPortalOutlet],\n  styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  }\n});\n\nMatSnackBarContainer.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Platform\n  }, {\n    type: MatSnackBarConfig\n  }];\n};\n\nMatSnackBarContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'snack-bar-container',\n      template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n      // In Ivy embedded views will be change detected from their declaration place, rather than\n      // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n      // because it might cause snack bars that were opened from a template not to be out of date.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        'class': 'mat-snack-bar-container',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      },\n      styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSnackBarModule = function MatSnackBarModule() {\n  _classCallCheck(this, MatSnackBarModule);\n};\n\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n  return new (t || MatSnackBarModule)();\n};\n\nMatSnackBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatSnackBarContainer, MatCommonModule],\n      declarations: [MatSnackBarContainer, SimpleSnackBar],\n      entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, {\n    declarations: function declarations() {\n      return [MatSnackBarContainer, SimpleSnackBar];\n    },\n    imports: function imports() {\n      return [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatSnackBarContainer, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to specify default snack bar. */\n\n\nvar MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nvar MatSnackBar = /*#__PURE__*/function () {\n  function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    _classCallCheck(this, MatSnackBar);\n\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n\n    this._snackBarRefAtThisLevel = null;\n    /** The component that should be rendered as the snack bar's simple component. */\n\n    this.simpleSnackBarComponent = SimpleSnackBar;\n    /** The container component that attaches the provided template or component. */\n\n    this.snackBarContainerComponent = MatSnackBarContainer;\n    /** The CSS class to apply for handset mode. */\n\n    this.handsetCssClass = 'mat-snack-bar-handset';\n  }\n  /** Reference to the currently opened snackbar at *any* level. */\n\n\n  _createClass(MatSnackBar, [{\n    key: \"_openedSnackBarRef\",\n    get: function get() {\n      var parent = this._parentSnackBar;\n      return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    },\n    set: function set(value) {\n      if (this._parentSnackBar) {\n        this._parentSnackBar._openedSnackBarRef = value;\n      } else {\n        this._snackBarRefAtThisLevel = value;\n      }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n\n  }, {\n    key: \"openFromComponent\",\n    value: function openFromComponent(component, config) {\n      return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n\n  }, {\n    key: \"openFromTemplate\",\n    value: function openFromTemplate(template, config) {\n      return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(message) {\n      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var config = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _config = Object.assign(Object.assign({}, this._defaultConfig), config); // Since the user doesn't have access to the component, we can\n      // override the data to pass in our own message and action.\n\n\n      _config.data = {\n        message: message,\n        action: action\n      }; // Since the snack bar has `role=\"alert\"`, we don't\n      // want to announce the same message twice.\n\n      if (_config.announcementMessage === message) {\n        _config.announcementMessage = undefined;\n      }\n\n      return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss() {\n      if (this._openedSnackBarRef) {\n        this._openedSnackBarRef.dismiss();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // Only dismiss the snack bar at the current level on destroy.\n      if (this._snackBarRefAtThisLevel) {\n        this._snackBarRefAtThisLevel.dismiss();\n      }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n\n  }, {\n    key: \"_attachSnackBarContainer\",\n    value: function _attachSnackBarContainer(overlayRef, config) {\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      var injector = Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarConfig,\n          useValue: config\n        }]\n      });\n      var containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n      var containerRef = overlayRef.attach(containerPortal);\n      containerRef.instance.snackBarConfig = config;\n      return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n\n  }, {\n    key: \"_attach\",\n    value: function _attach(content, userConfig) {\n      var _this6 = this;\n\n      var config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n\n      var overlayRef = this._createOverlay(config);\n\n      var container = this._attachSnackBarContainer(overlayRef, config);\n\n      var snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n      if (content instanceof TemplateRef) {\n        var portal = new TemplatePortal(content, null, {\n          $implicit: config.data,\n          snackBarRef: snackBarRef\n        });\n        snackBarRef.instance = container.attachTemplatePortal(portal);\n      } else {\n        var injector = this._createInjector(config, snackBarRef);\n\n        var _portal = new ComponentPortal(content, undefined, injector);\n\n        var contentRef = container.attachComponentPortal(_portal); // We can't pass this via the injector, because the injector is created earlier.\n\n        snackBarRef.instance = contentRef.instance;\n      } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n      // appropriate. This class is applied to the overlay element because the overlay must expand to\n      // fill the width of the screen for full width snackbars.\n\n\n      this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(function (state) {\n        var classList = overlayRef.overlayElement.classList;\n        state.matches ? classList.add(_this6.handsetCssClass) : classList.remove(_this6.handsetCssClass);\n      });\n\n      if (config.announcementMessage) {\n        // Wait until the snack bar contents have been announced then deliver this message.\n        container._onAnnounce.subscribe(function () {\n          _this6._live.announce(config.announcementMessage, config.politeness);\n        });\n      }\n\n      this._animateSnackBar(snackBarRef, config);\n\n      this._openedSnackBarRef = snackBarRef;\n      return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n\n  }, {\n    key: \"_animateSnackBar\",\n    value: function _animateSnackBar(snackBarRef, config) {\n      var _this7 = this;\n\n      // When the snackbar is dismissed, clear the reference to it.\n      snackBarRef.afterDismissed().subscribe(function () {\n        // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n        if (_this7._openedSnackBarRef == snackBarRef) {\n          _this7._openedSnackBarRef = null;\n        }\n\n        if (config.announcementMessage) {\n          _this7._live.clear();\n        }\n      });\n\n      if (this._openedSnackBarRef) {\n        // If a snack bar is already in view, dismiss it and enter the\n        // new snack bar after exit animation is complete.\n        this._openedSnackBarRef.afterDismissed().subscribe(function () {\n          snackBarRef.containerInstance.enter();\n        });\n\n        this._openedSnackBarRef.dismiss();\n      } else {\n        // If no snack bar is in view, enter the new snack bar.\n        snackBarRef.containerInstance.enter();\n      } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n      if (config.duration && config.duration > 0) {\n        snackBarRef.afterOpened().subscribe(function () {\n          return snackBarRef._dismissAfter(config.duration);\n        });\n      }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay(config) {\n      var overlayConfig = new OverlayConfig();\n      overlayConfig.direction = config.direction;\n\n      var positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n\n      var isRtl = config.direction === 'rtl';\n      var isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n      var isRight = !isLeft && config.horizontalPosition !== 'center';\n\n      if (isLeft) {\n        positionStrategy.left('0');\n      } else if (isRight) {\n        positionStrategy.right('0');\n      } else {\n        positionStrategy.centerHorizontally();\n      } // Set horizontal position.\n\n\n      if (config.verticalPosition === 'top') {\n        positionStrategy.top('0');\n      } else {\n        positionStrategy.bottom('0');\n      }\n\n      overlayConfig.positionStrategy = positionStrategy;\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n\n  }, {\n    key: \"_createInjector\",\n    value: function _createInjector(config, snackBarRef) {\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarRef,\n          useValue: snackBarRef\n        }, {\n          provide: MAT_SNACK_BAR_DATA,\n          useValue: config.data\n        }]\n      });\n    }\n  }]);\n\n  return MatSnackBar;\n}();\n\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function MatSnackBar_Factory() {\n    return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  },\n  token: MatSnackBar,\n  providedIn: MatSnackBarModule\n});\n\nMatSnackBar.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: LiveAnnouncer\n  }, {\n    type: Injector\n  }, {\n    type: BreakpointObserver\n  }, {\n    type: MatSnackBar,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: MatSnackBarConfig,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc5.Overlay\n    }, {\n      type: ɵngcc6.LiveAnnouncer\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc7.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations }; //# sourceMappingURL=snack-bar.js.map","map":{"version":3,"sources":["C:/projects/custom/angular11_12_table/node_modules/@angular/material/fesm2015/snack-bar.js"],"names":["i1","OverlayModule","OverlayConfig","Overlay","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","CommonModule","i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","NgZone","ElementRef","ChangeDetectorRef","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","MatCommonModule","MatButtonModule","Subject","Platform","take","takeUntil","trigger","state","style","transition","animate","i2","LiveAnnouncer","i3","Breakpoints","BreakpointObserver","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","SimpleSnackBar_div_2_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_div_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate","data","MatSnackBarContainer_ng_template_1_Template","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","next","complete","dismissWithAction","setTimeout","min","dispose","dismissedByAction","_onEnter","SimpleSnackBar","snackBarRef","ɵfac","SimpleSnackBar_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵproperty","hasAction","directives","NgIf","MatButton","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","selector","None","OnPush","host","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","event","fromState","toState","_completeExit","onEnter","run","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","onAnimationEnd","ɵɵsyntheticHostProperty","features","ɵɵInheritDefinitionFeature","MatSnackBarContainer_Template","ɵɵelement","ɵɵattribute","animation","propDecorators","static","Default","animations","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","parent","_openedSnackBarRef","value","component","config","_attach","_config","Object","assign","openFromComponent","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","matches","remove","announce","_animateSnackBar","afterDismissed","clear","enter","afterOpened","_dismissAfter","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","MatSnackBar_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","INJECTOR","token"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) { }\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    } }, directives: [ɵngcc4.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Platform },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                selector: 'snack-bar-container',\n                template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc3.Platform }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc5.Overlay }, { type: ɵngcc6.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc7.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map"]},"metadata":{},"sourceType":"module"}