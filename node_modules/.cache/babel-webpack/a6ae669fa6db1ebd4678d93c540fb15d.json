{"ast":null,"code":"import _classCallCheck from \"C:/projects/custom/angular11_12_table/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/projects/custom/angular11_12_table/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/projects/custom/angular11_12_table/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/projects/custom/angular11_12_table/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/projects/custom/angular11_12_table/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/projects/custom/angular11_12_table/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\n\nvar MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n  providedIn: 'root',\n  factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n  return {\n    useUtc: false\n  };\n}\n/** Creates an array and fills it with values. */\n\n\nfunction range(length, valueFunction) {\n  var valuesArray = Array(length);\n\n  for (var i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n\n  return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\n\n\nvar MomentDateAdapter = /*#__PURE__*/function (_DateAdapter) {\n  _inherits(MomentDateAdapter, _DateAdapter);\n\n  var _super = _createSuper(MomentDateAdapter);\n\n  function MomentDateAdapter(dateLocale, _options) {\n    var _this;\n\n    _classCallCheck(this, MomentDateAdapter);\n\n    _this = _super.call(this);\n    _this._options = _options;\n\n    _this.setLocale(dateLocale || moment.locale());\n\n    return _this;\n  }\n\n  _createClass(MomentDateAdapter, [{\n    key: \"setLocale\",\n    value: function setLocale(locale) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(MomentDateAdapter.prototype), \"setLocale\", this).call(this, locale);\n\n      var momentLocaleData = moment.localeData(locale);\n      this._localeData = {\n        firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n        longMonths: momentLocaleData.months(),\n        shortMonths: momentLocaleData.monthsShort(),\n        dates: range(31, function (i) {\n          return _this2.createDate(2017, 0, i + 1).format('D');\n        }),\n        longDaysOfWeek: momentLocaleData.weekdays(),\n        shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n        narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n      };\n    }\n  }, {\n    key: \"getYear\",\n    value: function getYear(date) {\n      return this.clone(date).year();\n    }\n  }, {\n    key: \"getMonth\",\n    value: function getMonth(date) {\n      return this.clone(date).month();\n    }\n  }, {\n    key: \"getDate\",\n    value: function getDate(date) {\n      return this.clone(date).date();\n    }\n  }, {\n    key: \"getDayOfWeek\",\n    value: function getDayOfWeek(date) {\n      return this.clone(date).day();\n    }\n  }, {\n    key: \"getMonthNames\",\n    value: function getMonthNames(style) {\n      // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n      return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n  }, {\n    key: \"getDateNames\",\n    value: function getDateNames() {\n      return this._localeData.dates;\n    }\n  }, {\n    key: \"getDayOfWeekNames\",\n    value: function getDayOfWeekNames(style) {\n      if (style == 'long') {\n        return this._localeData.longDaysOfWeek;\n      }\n\n      if (style == 'short') {\n        return this._localeData.shortDaysOfWeek;\n      }\n\n      return this._localeData.narrowDaysOfWeek;\n    }\n  }, {\n    key: \"getYearName\",\n    value: function getYearName(date) {\n      return this.clone(date).format('YYYY');\n    }\n  }, {\n    key: \"getFirstDayOfWeek\",\n    value: function getFirstDayOfWeek() {\n      return this._localeData.firstDayOfWeek;\n    }\n  }, {\n    key: \"getNumDaysInMonth\",\n    value: function getNumDaysInMonth(date) {\n      return this.clone(date).daysInMonth();\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(date) {\n      return date.clone().locale(this.locale);\n    }\n  }, {\n    key: \"createDate\",\n    value: function createDate(year, month, date) {\n      // Moment.js will create an invalid date if any of the components are out of bounds, but we\n      // explicitly check each case so we can throw more descriptive errors.\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (month < 0 || month > 11) {\n          throw Error(\"Invalid month index \\\"\".concat(month, \"\\\". Month index has to be between 0 and 11.\"));\n        }\n\n        if (date < 1) {\n          throw Error(\"Invalid date \\\"\".concat(date, \"\\\". Date has to be greater than 0.\"));\n        }\n      }\n\n      var result = this._createMoment({\n        year: year,\n        month: month,\n        date: date\n      }).locale(this.locale); // If the result isn't valid, the date must have been out of bounds for this month.\n\n\n      if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\"Invalid date \\\"\".concat(date, \"\\\" for month with index \\\"\").concat(month, \"\\\".\"));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"today\",\n    value: function today() {\n      return this._createMoment().locale(this.locale);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(value, parseFormat) {\n      if (value && typeof value == 'string') {\n        return this._createMoment(value, parseFormat, this.locale);\n      }\n\n      return value ? this._createMoment(value).locale(this.locale) : null;\n    }\n  }, {\n    key: \"format\",\n    value: function format(date, displayFormat) {\n      date = this.clone(date);\n\n      if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('MomentDateAdapter: Cannot format invalid date.');\n      }\n\n      return date.format(displayFormat);\n    }\n  }, {\n    key: \"addCalendarYears\",\n    value: function addCalendarYears(date, years) {\n      return this.clone(date).add({\n        years: years\n      });\n    }\n  }, {\n    key: \"addCalendarMonths\",\n    value: function addCalendarMonths(date, months) {\n      return this.clone(date).add({\n        months: months\n      });\n    }\n  }, {\n    key: \"addCalendarDays\",\n    value: function addCalendarDays(date, days) {\n      return this.clone(date).add({\n        days: days\n      });\n    }\n  }, {\n    key: \"toIso8601\",\n    value: function toIso8601(date) {\n      return this.clone(date).format();\n    }\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     */\n\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(value) {\n      var date;\n\n      if (value instanceof Date) {\n        date = this._createMoment(value).locale(this.locale);\n      } else if (this.isDateInstance(value)) {\n        // Note: assumes that cloning also sets the correct locale.\n        return this.clone(value);\n      }\n\n      if (typeof value === 'string') {\n        if (!value) {\n          return null;\n        }\n\n        date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n      }\n\n      if (date && this.isValid(date)) {\n        return this._createMoment(date).locale(this.locale);\n      }\n\n      return _get(_getPrototypeOf(MomentDateAdapter.prototype), \"deserialize\", this).call(this, value);\n    }\n  }, {\n    key: \"isDateInstance\",\n    value: function isDateInstance(obj) {\n      return moment.isMoment(obj);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(date) {\n      return this.clone(date).isValid();\n    }\n  }, {\n    key: \"invalid\",\n    value: function invalid() {\n      return moment.invalid();\n    }\n    /** Creates a Moment instance while respecting the current UTC settings. */\n\n  }, {\n    key: \"_createMoment\",\n    value: function _createMoment(date, format, locale) {\n      var _ref = this._options || {},\n          strict = _ref.strict,\n          useUtc = _ref.useUtc;\n\n      return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n    }\n  }]);\n\n  return MomentDateAdapter;\n}(DateAdapter);\n\nMomentDateAdapter.ɵfac = function MomentDateAdapter_Factory(t) {\n  return new (t || MomentDateAdapter)(ɵngcc0.ɵɵinject(MAT_DATE_LOCALE, 8), ɵngcc0.ɵɵinject(MAT_MOMENT_DATE_ADAPTER_OPTIONS, 8));\n};\n\nMomentDateAdapter.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MomentDateAdapter,\n  factory: MomentDateAdapter.ɵfac\n});\n\nMomentDateAdapter.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_LOCALE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MomentDateAdapter, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_LOCALE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MAT_MOMENT_DATE_FORMATS = {\n  parse: {\n    dateInput: 'l'\n  },\n  display: {\n    dateInput: 'l',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY'\n  }\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar MomentDateModule = function MomentDateModule() {\n  _classCallCheck(this, MomentDateModule);\n};\n\nMomentDateModule.ɵfac = function MomentDateModule_Factory(t) {\n  return new (t || MomentDateModule)();\n};\n\nMomentDateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MomentDateModule\n});\nMomentDateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [{\n    provide: DateAdapter,\n    useClass: MomentDateAdapter,\n    deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MomentDateModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: DateAdapter,\n        useClass: MomentDateAdapter,\n        deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n      }]\n    }]\n  }], null, null);\n})();\n\nvar ɵ0 = MAT_MOMENT_DATE_FORMATS;\n\nvar MatMomentDateModule = function MatMomentDateModule() {\n  _classCallCheck(this, MatMomentDateModule);\n};\n\nMatMomentDateModule.ɵfac = function MatMomentDateModule_Factory(t) {\n  return new (t || MatMomentDateModule)();\n};\n\nMatMomentDateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatMomentDateModule\n});\nMatMomentDateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [{\n    provide: MAT_DATE_FORMATS,\n    useValue: ɵ0\n  }],\n  imports: [[MomentDateModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMomentDateModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MomentDateModule],\n      providers: [{\n        provide: MAT_DATE_FORMATS,\n        useValue: ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMomentDateModule, {\n    imports: [MomentDateModule]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_FORMATS, MatMomentDateModule, MomentDateAdapter, MomentDateModule, ɵ0 }; //# sourceMappingURL=material-moment-adapter.js.map","map":{"version":3,"sources":["C:/projects/custom/angular11_12_table/node_modules/@angular/material-moment-adapter/fesm2015/material-moment-adapter.js"],"names":["InjectionToken","Injectable","Optional","Inject","NgModule","DateAdapter","MAT_DATE_LOCALE","MAT_DATE_FORMATS","_rollupMoment","_rollupMoment__default","ɵngcc0","moment","MAT_MOMENT_DATE_ADAPTER_OPTIONS","providedIn","factory","MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY","useUtc","range","length","valueFunction","valuesArray","Array","i","MomentDateAdapter","dateLocale","_options","setLocale","locale","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","months","shortMonths","monthsShort","dates","createDate","format","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","date","clone","year","month","day","style","daysInMonth","ngDevMode","Error","result","_createMoment","isValid","value","parseFormat","displayFormat","years","add","days","Date","isDateInstance","ISO_8601","obj","isMoment","invalid","strict","utc","ɵfac","MomentDateAdapter_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","ctorParameters","type","String","decorators","args","undefined","ɵsetClassMetadata","MAT_MOMENT_DATE_FORMATS","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","MomentDateModule","MomentDateModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","provide","useClass","deps","ɵ0","MatMomentDateModule","MatMomentDateModule_Factory","useValue","imports","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["import { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nconst moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\nconst MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n    providedIn: 'root',\n    factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n    return {\n        useUtc: false\n    };\n}\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\nclass MomentDateAdapter extends DateAdapter {\n    constructor(dateLocale, _options) {\n        super();\n        this._options = _options;\n        this.setLocale(dateLocale || moment.locale());\n    }\n    setLocale(locale) {\n        super.setLocale(locale);\n        let momentLocaleData = moment.localeData(locale);\n        this._localeData = {\n            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n            longMonths: momentLocaleData.months(),\n            shortMonths: momentLocaleData.monthsShort(),\n            dates: range(31, (i) => this.createDate(2017, 0, i + 1).format('D')),\n            longDaysOfWeek: momentLocaleData.weekdays(),\n            shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n        };\n    }\n    getYear(date) {\n        return this.clone(date).year();\n    }\n    getMonth(date) {\n        return this.clone(date).month();\n    }\n    getDate(date) {\n        return this.clone(date).date();\n    }\n    getDayOfWeek(date) {\n        return this.clone(date).day();\n    }\n    getMonthNames(style) {\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n    getDateNames() {\n        return this._localeData.dates;\n    }\n    getDayOfWeekNames(style) {\n        if (style == 'long') {\n            return this._localeData.longDaysOfWeek;\n        }\n        if (style == 'short') {\n            return this._localeData.shortDaysOfWeek;\n        }\n        return this._localeData.narrowDaysOfWeek;\n    }\n    getYearName(date) {\n        return this.clone(date).format('YYYY');\n    }\n    getFirstDayOfWeek() {\n        return this._localeData.firstDayOfWeek;\n    }\n    getNumDaysInMonth(date) {\n        return this.clone(date).daysInMonth();\n    }\n    clone(date) {\n        return date.clone().locale(this.locale);\n    }\n    createDate(year, month, date) {\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\n        // explicitly check each case so we can throw more descriptive errors.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        const result = this._createMoment({ year, month, date }).locale(this.locale);\n        // If the result isn't valid, the date must have been out of bounds for this month.\n        if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return this._createMoment().locale(this.locale);\n    }\n    parse(value, parseFormat) {\n        if (value && typeof value == 'string') {\n            return this._createMoment(value, parseFormat, this.locale);\n        }\n        return value ? this._createMoment(value).locale(this.locale) : null;\n    }\n    format(date, displayFormat) {\n        date = this.clone(date);\n        if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('MomentDateAdapter: Cannot format invalid date.');\n        }\n        return date.format(displayFormat);\n    }\n    addCalendarYears(date, years) {\n        return this.clone(date).add({ years });\n    }\n    addCalendarMonths(date, months) {\n        return this.clone(date).add({ months });\n    }\n    addCalendarDays(date, days) {\n        return this.clone(date).add({ days });\n    }\n    toIso8601(date) {\n        return this.clone(date).format();\n    }\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     */\n    deserialize(value) {\n        let date;\n        if (value instanceof Date) {\n            date = this._createMoment(value).locale(this.locale);\n        }\n        else if (this.isDateInstance(value)) {\n            // Note: assumes that cloning also sets the correct locale.\n            return this.clone(value);\n        }\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n        }\n        if (date && this.isValid(date)) {\n            return this._createMoment(date).locale(this.locale);\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return moment.isMoment(obj);\n    }\n    isValid(date) {\n        return this.clone(date).isValid();\n    }\n    invalid() {\n        return moment.invalid();\n    }\n    /** Creates a Moment instance while respecting the current UTC settings. */\n    _createMoment(date, format, locale) {\n        const { strict, useUtc } = this._options || {};\n        return useUtc\n            ? moment.utc(date, format, locale, strict)\n            : moment(date, format, locale, strict);\n    }\n}\nMomentDateAdapter.ɵfac = function MomentDateAdapter_Factory(t) { return new (t || MomentDateAdapter)(ɵngcc0.ɵɵinject(MAT_DATE_LOCALE, 8), ɵngcc0.ɵɵinject(MAT_MOMENT_DATE_ADAPTER_OPTIONS, 8)); };\nMomentDateAdapter.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MomentDateAdapter, factory: MomentDateAdapter.ɵfac });\nMomentDateAdapter.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MomentDateAdapter, [{\n        type: Injectable\n    }], function () { return [{ type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_LOCALE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_MOMENT_DATE_FORMATS = {\n    parse: {\n        dateInput: 'l',\n    },\n    display: {\n        dateInput: 'l',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MomentDateModule {\n}\nMomentDateModule.ɵfac = function MomentDateModule_Factory(t) { return new (t || MomentDateModule)(); };\nMomentDateModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MomentDateModule });\nMomentDateModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        {\n            provide: DateAdapter,\n            useClass: MomentDateAdapter,\n            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n        }\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MomentDateModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    {\n                        provide: DateAdapter,\n                        useClass: MomentDateAdapter,\n                        deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                    }\n                ]\n            }]\n    }], null, null); })();\nconst ɵ0 = MAT_MOMENT_DATE_FORMATS;\nclass MatMomentDateModule {\n}\nMatMomentDateModule.ɵfac = function MatMomentDateModule_Factory(t) { return new (t || MatMomentDateModule)(); };\nMatMomentDateModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatMomentDateModule });\nMatMomentDateModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0 }], imports: [[MomentDateModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMomentDateModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MomentDateModule],\n                providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0 }]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMomentDateModule, { imports: [MomentDateModule] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_FORMATS, MatMomentDateModule, MomentDateAdapter, MomentDateModule, ɵ0 };\n\n//# sourceMappingURL=material-moment-adapter.js.map"]},"metadata":{},"sourceType":"module"}