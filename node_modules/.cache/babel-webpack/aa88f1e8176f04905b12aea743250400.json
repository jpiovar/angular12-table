{"ast":null,"code":"import _toConsumableArray from \"C:/projects/custom/angular12_table/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"C:/projects/custom/angular12_table/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/projects/custom/angular12_table/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/projects/custom/angular12_table/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/projects/custom/angular12_table/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/projects/custom/angular12_table/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Event object emitted by MatChip when selected or deselected. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nvar _c0 = [\"*\"];\n\nvar MatChipSelectionChange = function MatChipSelectionChange(\n/** Reference to the chip that emitted the event. */\nsource,\n/** Whether the chip that emitted the event is selected. */\nselected) {\n  var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  _classCallCheck(this, MatChipSelectionChange);\n\n  this.source = source;\n  this.selected = selected;\n  this.isUserInput = isUserInput;\n};\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon'); // Boilerplate for applying mixins to MatChip.\n\n/** @docs-private */\n\nvar MatChipBase = function MatChipBase(_elementRef) {\n  _classCallCheck(this, MatChipBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n\n\nvar MatChipAvatar = function MatChipAvatar() {\n  _classCallCheck(this, MatChipAvatar);\n};\n\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\n\nMatChipAvatar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_AVATAR,\n    useExisting: MatChipAvatar\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      },\n      providers: [{\n        provide: MAT_CHIP_AVATAR,\n        useExisting: MatChipAvatar\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n\n\nvar MatChipTrailingIcon = function MatChipTrailingIcon() {\n  _classCallCheck(this, MatChipTrailingIcon);\n};\n\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\n\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_TRAILING_ICON,\n    useExisting: MatChipTrailingIcon\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      },\n      providers: [{\n        provide: MAT_CHIP_TRAILING_ICON,\n        useExisting: MatChipTrailingIcon\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n\n\nvar MatChip = /*#__PURE__*/function (_MatChipMixinBase2) {\n  _inherits(MatChip, _MatChipMixinBase2);\n\n  var _super = _createSuper(MatChip);\n\n  function MatChip(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n    var _this;\n\n    _classCallCheck(this, MatChip);\n\n    _this = _super.call(this, elementRef);\n    _this._ngZone = _ngZone;\n    _this._changeDetectorRef = _changeDetectorRef;\n    /** Whether the chip has focus. */\n\n    _this._hasFocus = false;\n    /** Whether the chip list is selectable */\n\n    _this.chipListSelectable = true;\n    /** Whether the chip list is in multi-selection mode. */\n\n    _this._chipListMultiple = false;\n    /** Whether the chip list as a whole is disabled. */\n\n    _this._chipListDisabled = false;\n    _this._selected = false;\n    _this._selectable = true;\n    _this._disabled = false;\n    _this._removable = true;\n    /** Emits when the chip is focused. */\n\n    _this._onFocus = new Subject();\n    /** Emits when the chip is blured. */\n\n    _this._onBlur = new Subject();\n    /** Emitted when the chip is selected or deselected. */\n\n    _this.selectionChange = new EventEmitter();\n    /** Emitted when the chip is destroyed. */\n\n    _this.destroyed = new EventEmitter();\n    /** Emitted when a chip is to be removed. */\n\n    _this.removed = new EventEmitter();\n\n    _this._addHostClassName(); // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n\n\n    _this._chipRippleTarget = _document.createElement('div');\n\n    _this._chipRippleTarget.classList.add('mat-chip-ripple');\n\n    _this._elementRef.nativeElement.appendChild(_this._chipRippleTarget);\n\n    _this._chipRipple = new RippleRenderer(_assertThisInitialized(_this), _ngZone, _this._chipRippleTarget, platform);\n\n    _this._chipRipple.setupTriggerEvents(elementRef);\n\n    _this.rippleConfig = globalRippleOptions || {};\n    _this._animationsDisabled = animationMode === 'NoopAnimations';\n    _this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n    return _this;\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n\n\n  _createClass(MatChip, [{\n    key: \"rippleDisabled\",\n    get: function get() {\n      return this.disabled || this.disableRipple || this._animationsDisabled || !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    },\n    set: function set(value) {\n      var coercedValue = coerceBooleanProperty(value);\n\n      if (coercedValue !== this._selected) {\n        this._selected = coercedValue;\n\n        this._dispatchSelectionChange();\n      }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n    },\n    set: function set(value) {\n      this._value = value;\n    }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n\n  }, {\n    key: \"selectable\",\n    get: function get() {\n      return this._selectable && this.chipListSelectable;\n    },\n    set: function set(value) {\n      this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._chipListDisabled || this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n\n  }, {\n    key: \"removable\",\n    get: function get() {\n      return this._removable;\n    },\n    set: function set(value) {\n      this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n\n  }, {\n    key: \"ariaSelected\",\n    get: function get() {\n      // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n      // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n      return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n    }\n  }, {\n    key: \"_addHostClassName\",\n    value: function _addHostClassName() {\n      var basicChipAttrName = 'mat-basic-chip';\n      var element = this._elementRef.nativeElement;\n\n      if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n        element.classList.add(basicChipAttrName);\n        return;\n      } else {\n        element.classList.add('mat-standard-chip');\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroyed.emit({\n        chip: this\n      });\n\n      this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._dispatchSelectionChange();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Deselects the chip. */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      if (this._selected) {\n        this._selected = false;\n\n        this._dispatchSelectionChange();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Select this chip and emit selected event */\n\n  }, {\n    key: \"selectViaInteraction\",\n    value: function selectViaInteraction() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._dispatchSelectionChange(true);\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Toggles the current selected state of this chip. */\n\n  }, {\n    key: \"toggleSelected\",\n    value: function toggleSelected() {\n      var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this._selected = !this.selected;\n\n      this._dispatchSelectionChange(isUserInput);\n\n      this._changeDetectorRef.markForCheck();\n\n      return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!this._hasFocus) {\n        this._elementRef.nativeElement.focus();\n\n        this._onFocus.next({\n          chip: this\n        });\n      }\n\n      this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.removable) {\n        this.removed.emit({\n          chip: this\n        });\n      }\n    }\n    /** Handles click events on the chip. */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      if (this.disabled) {\n        event.preventDefault();\n      } else {\n        event.stopPropagation();\n      }\n    }\n    /** Handle custom key presses. */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case DELETE:\n        case BACKSPACE:\n          // If we are removable, remove the focused chip\n          this.remove(); // Always prevent so page navigation does not occur\n\n          event.preventDefault();\n          break;\n\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this.toggleSelected(true);\n          } // Always prevent space from scrolling the page since the list has focus\n\n\n          event.preventDefault();\n          break;\n      }\n    }\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      var _this2 = this;\n\n      // When animations are enabled, Angular may end up removing the chip from the DOM a little\n      // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n      // that moves focus not the next item. To work around the issue, we defer marking the chip\n      // as not focused until the next time the zone stabilizes.\n      this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n        _this2._ngZone.run(function () {\n          _this2._hasFocus = false;\n\n          _this2._onBlur.next({\n            chip: _this2\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_dispatchSelectionChange\",\n    value: function _dispatchSelectionChange() {\n      var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.selectionChange.emit({\n        source: this,\n        isUserInput: isUserInput,\n        selected: this._selected\n      });\n    }\n  }]);\n\n  return MatChip;\n}(_MatChipMixinBase);\n\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatChip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"],\n  hostVars: 14,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    disabled: \"disabled\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatChip.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatChip.propDecorators = {\n  avatar: [{\n    type: ContentChild,\n    args: [MAT_CHIP_AVATAR]\n  }],\n  trailingIcon: [{\n    type: ContentChild,\n    args: [MAT_CHIP_TRAILING_ICON]\n  }],\n  removeIcon: [{\n    type: ContentChild,\n    args: [MAT_CHIP_REMOVE]\n  }],\n  selected: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  removable: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  removed: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\",\n      inputs: ['color', 'disableRipple', 'tabIndex'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip mat-focus-indicator',\n        '[attr.tabindex]': 'disabled ? null : tabIndex',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationsDisabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    avatar: [{\n      type: ContentChild,\n      args: [MAT_CHIP_AVATAR]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_TRAILING_ICON]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_REMOVE]\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n\n\nvar MatChipRemove = /*#__PURE__*/function () {\n  function MatChipRemove(_parentChip, elementRef) {\n    _classCallCheck(this, MatChipRemove);\n\n    this._parentChip = _parentChip;\n\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n  /** Calls the parent chip's public `remove()` method if applicable. */\n\n\n  _createClass(MatChipRemove, [{\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      var parentChip = this._parentChip;\n\n      if (parentChip.removable && !parentChip.disabled) {\n        parentChip.remove();\n      } // We need to stop event propagation because otherwise the event will bubble up to the\n      // form field and cause the `onContainerClick` method to be invoked. This method would then\n      // reset the focused chip that has been focused after chip removal. Usually the parent\n      // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n      // that the chip is being removed before the event bubbles up.\n\n\n      event.stopPropagation();\n    }\n  }]);\n\n  return MatChipRemove;\n}();\n\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatChipRemove.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_REMOVE,\n    useExisting: MatChipRemove\n  }])]\n});\n\nMatChipRemove.ctorParameters = function () {\n  return [{\n    type: MatChip\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      },\n      providers: [{\n        provide: MAT_CHIP_REMOVE,\n        useExisting: MatChipRemove\n      }]\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for the chips module. */\n\n\nvar MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n\n/** @docs-private */\n\nvar _MatChipListBase = mixinErrorState( /*#__PURE__*/function () {\n  function _class(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    _classCallCheck(this, _class);\n\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n  return _class;\n}()); // Increasing integer for generating unique ids for chip-list components.\n\n\nvar nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\n\nvar MatChipListChange = function MatChipListChange(\n/** Chip list that emitted the event. */\nsource,\n/** Value of the chip list when the event was emitted. */\nvalue) {\n  _classCallCheck(this, MatChipListChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n\n\nvar MatChipList = /*#__PURE__*/function (_MatChipListBase2) {\n  _inherits(MatChipList, _MatChipListBase2);\n\n  var _super2 = _createSuper(MatChipList);\n\n  function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n    var _this3;\n\n    _classCallCheck(this, MatChipList);\n\n    _this3 = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this3._elementRef = _elementRef;\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3._dir = _dir;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this3.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n\n    _this3._lastDestroyedChipIndex = null;\n    /** Subject that emits when the component has been destroyed. */\n\n    _this3._destroyed = new Subject();\n    /** Uid of the chip list */\n\n    _this3._uid = \"mat-chip-list-\".concat(nextUniqueId$1++);\n    /** Tab index for the chip list. */\n\n    _this3._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n\n    _this3._userTabIndex = null;\n    /** Function when touched */\n\n    _this3._onTouched = function () {};\n    /** Function when changed */\n\n\n    _this3._onChange = function () {};\n\n    _this3._multiple = false;\n\n    _this3._compareWith = function (o1, o2) {\n      return o1 === o2;\n    };\n\n    _this3._required = false;\n    _this3._disabled = false;\n    /** Orientation of the chip list. */\n\n    _this3.ariaOrientation = 'horizontal';\n    _this3._selectable = true;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n\n    _this3.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    _this3.valueChange = new EventEmitter();\n\n    if (_this3.ngControl) {\n      _this3.ngControl.valueAccessor = _assertThisInitialized(_this3);\n    }\n\n    return _this3;\n  }\n  /** The array of selected chips inside chip list. */\n\n\n  _createClass(MatChipList, [{\n    key: \"selected\",\n    get: function get() {\n      return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n\n  }, {\n    key: \"role\",\n    get: function get() {\n      return this.empty ? null : 'listbox';\n    }\n    /** Whether the user should be allowed to select multiple chips. */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    },\n    set: function set(value) {\n      this._multiple = coerceBooleanProperty(value);\n\n      this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n\n  }, {\n    key: \"compareWith\",\n    get: function get() {\n      return this._compareWith;\n    },\n    set: function set(fn) {\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(value) {\n      this.writeValue(value);\n      this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    },\n    set: function set(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n\n  }, {\n    key: \"focused\",\n    get: function get() {\n      return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n\n  }, {\n    key: \"selectable\",\n    get: function get() {\n      return this._selectable;\n    },\n    set: function set(value) {\n      var _this4 = this;\n\n      this._selectable = coerceBooleanProperty(value);\n\n      if (this.chips) {\n        this.chips.forEach(function (chip) {\n          return chip.chipListSelectable = _this4._selectable;\n        });\n      }\n    }\n  }, {\n    key: \"tabIndex\",\n    set: function set(value) {\n      this._userTabIndex = value;\n      this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n\n  }, {\n    key: \"chipSelectionChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip.selectionChange;\n      })));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n\n  }, {\n    key: \"chipFocusChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip._onFocus;\n      })));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n\n  }, {\n    key: \"chipBlurChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip._onBlur;\n      })));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n\n  }, {\n    key: \"chipRemoveChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip.destroyed;\n      })));\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this5 = this;\n\n      this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n      if (this._dir) {\n        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(function (dir) {\n          return _this5._keyManager.withHorizontalOrientation(dir);\n        });\n      }\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        _this5._allowFocusEscape();\n      }); // When the list changes, re-subscribe\n\n\n      this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(function () {\n        if (_this5.disabled) {\n          // Since this happens after the content has been\n          // checked, we need to defer it to the next tick.\n          Promise.resolve().then(function () {\n            _this5._syncChipsState();\n          });\n        }\n\n        _this5._resetChips(); // Reset chips selected/deselected status\n\n\n        _this5._initializeSelection(); // Check to see if we need to update our tab index\n\n\n        _this5._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n        _this5._updateFocusForDestroyedChips();\n\n        _this5.stateChanges.next();\n      });\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n      this.stateChanges.next();\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n\n        if (this.ngControl.disabled !== this._disabled) {\n          this.disabled = !!this.ngControl.disabled;\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this.stateChanges.complete();\n\n      this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n\n  }, {\n    key: \"registerInput\",\n    value: function registerInput(inputElement) {\n      this._chipInput = inputElement; // We use this attribute to match the chip list to its input in test harnesses.\n      // Set the attribute directly here to avoid \"changed after checked\" errors.\n\n      this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (this.chips) {\n        this._setSelectionByValue(value, false);\n      }\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick(event) {\n      if (!this._originatesFromChip(event)) {\n        this.focus();\n      }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      if (this.disabled) {\n        return;\n      } // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n      // Focus on first element if there's no chipInput inside chip-list\n\n\n      if (this._chipInput && this._chipInput.focused) {// do nothing\n      } else if (this.chips.length > 0) {\n        this._keyManager.setFirstItemActive();\n\n        this.stateChanges.next();\n      } else {\n        this._focusInput(options);\n\n        this.stateChanges.next();\n      }\n    }\n    /** Attempt to focus an input if we have one. */\n\n  }, {\n    key: \"_focusInput\",\n    value: function _focusInput(options) {\n      if (this._chipInput) {\n        this._chipInput.focus(options);\n      }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      var target = event.target;\n\n      if (target && target.classList.contains('mat-chip')) {\n        this._keyManager.onKeydown(event);\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n\n  }, {\n    key: \"_updateTabIndex\",\n    value: function _updateTabIndex() {\n      // If we have 0 chips, we should not allow keyboard focus\n      this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n\n  }, {\n    key: \"_updateFocusForDestroyedChips\",\n    value: function _updateFocusForDestroyedChips() {\n      // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n      if (this._lastDestroyedChipIndex != null) {\n        if (this.chips.length) {\n          var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n\n          this._keyManager.setActiveItem(newChipIndex);\n        } else {\n          this.focus();\n        }\n      }\n\n      this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n\n  }, {\n    key: \"_isValidIndex\",\n    value: function _isValidIndex(index) {\n      return index >= 0 && index < this.chips.length;\n    }\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this6 = this;\n\n      var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      this._clearSelection();\n\n      this.chips.forEach(function (chip) {\n        return chip.deselect();\n      });\n\n      if (Array.isArray(value)) {\n        value.forEach(function (currentValue) {\n          return _this6._selectValue(currentValue, isUserInput);\n        });\n\n        this._sortValues();\n      } else {\n        var correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what chip the user interacted with last.\n\n\n        if (correspondingChip) {\n          if (isUserInput) {\n            this._keyManager.setActiveItem(correspondingChip);\n          }\n        }\n      }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var _this7 = this;\n\n      var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var correspondingChip = this.chips.find(function (chip) {\n        return chip.value != null && _this7._compareWith(chip.value, value);\n      });\n\n      if (correspondingChip) {\n        isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n        this._selectionModel.select(correspondingChip);\n      }\n\n      return correspondingChip;\n    }\n  }, {\n    key: \"_initializeSelection\",\n    value: function _initializeSelection() {\n      var _this8 = this;\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(function () {\n        if (_this8.ngControl || _this8._value) {\n          _this8._setSelectionByValue(_this8.ngControl ? _this8.ngControl.value : _this8._value, false);\n\n          _this8.stateChanges.next();\n        }\n      });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection(skip) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(function (chip) {\n        if (chip !== skip) {\n          chip.deselect();\n        }\n      });\n      this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n\n  }, {\n    key: \"_sortValues\",\n    value: function _sortValues() {\n      var _this9 = this;\n\n      if (this._multiple) {\n        this._selectionModel.clear();\n\n        this.chips.forEach(function (chip) {\n          if (chip.selected) {\n            _this9._selectionModel.select(chip);\n          }\n        });\n        this.stateChanges.next();\n      }\n    }\n    /** Emits change event to set the model value. */\n\n  }, {\n    key: \"_propagateChanges\",\n    value: function _propagateChanges(fallbackValue) {\n      var valueToEmit = null;\n\n      if (Array.isArray(this.selected)) {\n        valueToEmit = this.selected.map(function (chip) {\n          return chip.value;\n        });\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.change.emit(new MatChipListChange(this, valueToEmit));\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      var _this10 = this;\n\n      if (!this._hasFocusedChip()) {\n        this._keyManager.setActiveItem(-1);\n      }\n\n      if (!this.disabled) {\n        if (this._chipInput) {\n          // If there's a chip input, we should check whether the focus moved to chip input.\n          // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n          // to chip input, do nothing.\n          // Timeout is needed to wait for the focus() event trigger on chip input.\n          setTimeout(function () {\n            if (!_this10.focused) {\n              _this10._markAsTouched();\n            }\n          });\n        } else {\n          // If there's no chip input, then mark the field as touched.\n          this._markAsTouched();\n        }\n      }\n    }\n    /** Mark the field as touched */\n\n  }, {\n    key: \"_markAsTouched\",\n    value: function _markAsTouched() {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n\n  }, {\n    key: \"_allowFocusEscape\",\n    value: function _allowFocusEscape() {\n      var _this11 = this;\n\n      if (this._tabIndex !== -1) {\n        this._tabIndex = -1;\n        setTimeout(function () {\n          _this11._tabIndex = _this11._userTabIndex || 0;\n\n          _this11._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"_resetChips\",\n    value: function _resetChips() {\n      this._dropSubscriptions();\n\n      this._listenToChipsFocus();\n\n      this._listenToChipsSelection();\n\n      this._listenToChipsRemoved();\n    }\n  }, {\n    key: \"_dropSubscriptions\",\n    value: function _dropSubscriptions() {\n      if (this._chipFocusSubscription) {\n        this._chipFocusSubscription.unsubscribe();\n\n        this._chipFocusSubscription = null;\n      }\n\n      if (this._chipBlurSubscription) {\n        this._chipBlurSubscription.unsubscribe();\n\n        this._chipBlurSubscription = null;\n      }\n\n      if (this._chipSelectionSubscription) {\n        this._chipSelectionSubscription.unsubscribe();\n\n        this._chipSelectionSubscription = null;\n      }\n\n      if (this._chipRemoveSubscription) {\n        this._chipRemoveSubscription.unsubscribe();\n\n        this._chipRemoveSubscription = null;\n      }\n    }\n    /** Listens to user-generated selection events on each chip. */\n\n  }, {\n    key: \"_listenToChipsSelection\",\n    value: function _listenToChipsSelection() {\n      var _this12 = this;\n\n      this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (event) {\n        event.source.selected ? _this12._selectionModel.select(event.source) : _this12._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n        if (!_this12.multiple) {\n          _this12.chips.forEach(function (chip) {\n            if (!_this12._selectionModel.isSelected(chip) && chip.selected) {\n              chip.deselect();\n            }\n          });\n        }\n\n        if (event.isUserInput) {\n          _this12._propagateChanges();\n        }\n      });\n    }\n    /** Listens to user-generated selection events on each chip. */\n\n  }, {\n    key: \"_listenToChipsFocus\",\n    value: function _listenToChipsFocus() {\n      var _this13 = this;\n\n      this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n        var chipIndex = _this13.chips.toArray().indexOf(event.chip);\n\n        if (_this13._isValidIndex(chipIndex)) {\n          _this13._keyManager.updateActiveItem(chipIndex);\n        }\n\n        _this13.stateChanges.next();\n      });\n      this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n        _this13._blur();\n\n        _this13.stateChanges.next();\n      });\n    }\n  }, {\n    key: \"_listenToChipsRemoved\",\n    value: function _listenToChipsRemoved() {\n      var _this14 = this;\n\n      this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {\n        var chip = event.chip;\n\n        var chipIndex = _this14.chips.toArray().indexOf(event.chip); // In case the chip that will be removed is currently focused, we temporarily store\n        // the index in order to be able to determine an appropriate sibling chip that will\n        // receive focus.\n\n\n        if (_this14._isValidIndex(chipIndex) && chip._hasFocus) {\n          _this14._lastDestroyedChipIndex = chipIndex;\n        }\n      });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n\n  }, {\n    key: \"_originatesFromChip\",\n    value: function _originatesFromChip(event) {\n      var currentElement = event.target;\n\n      while (currentElement && currentElement !== this._elementRef.nativeElement) {\n        if (currentElement.classList.contains('mat-chip')) {\n          return true;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n\n      return false;\n    }\n    /** Checks whether any of the chips is focused. */\n\n  }, {\n    key: \"_hasFocusedChip\",\n    value: function _hasFocusedChip() {\n      return this.chips && this.chips.some(function (chip) {\n        return chip._hasFocus;\n      });\n    }\n    /** Syncs the list's state with the individual chips. */\n\n  }, {\n    key: \"_syncChipsState\",\n    value: function _syncChipsState() {\n      var _this15 = this;\n\n      if (this.chips) {\n        this.chips.forEach(function (chip) {\n          chip._chipListDisabled = _this15._disabled;\n          chip._chipListMultiple = _this15.multiple;\n        });\n      }\n    }\n  }]);\n\n  return MatChipList;\n}(_MatChipListBase);\n\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n};\n\nMatChipList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatChipList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }]\n  }];\n};\n\nMatChipList.propDecorators = {\n  errorStateMatcher: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ariaOrientation: [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  selectable: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  chips: [{\n    type: ContentChildren,\n    args: [MatChip, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: \"<div class=\\\"mat-chip-list-wrapper\\\"><ng-content></ng-content></div>\",\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'role ? required : null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.ErrorStateMatcher\n    }, {\n      type: ɵngcc3.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\n\n\nvar nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n\nvar MatChipInput = /*#__PURE__*/function () {\n  function MatChipInput(_elementRef, _defaultOptions) {\n    _classCallCheck(this, MatChipInput);\n\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /** Whether the control is focused. */\n\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /** Emitted when a chip is to be added. */\n\n    this.chipEnd = new EventEmitter();\n    /** The input's placeholder text. */\n\n    this.placeholder = '';\n    /** Unique id for the input. */\n\n    this.id = \"mat-chip-list-input-\".concat(nextUniqueId++);\n    this._disabled = false;\n    this.inputElement = this._elementRef.nativeElement;\n  }\n  /** Register input for chip list */\n\n\n  _createClass(MatChipInput, [{\n    key: \"chipList\",\n    set: function set(value) {\n      if (value) {\n        this._chipList = value;\n\n        this._chipList.registerInput(this);\n      }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n\n  }, {\n    key: \"addOnBlur\",\n    get: function get() {\n      return this._addOnBlur;\n    },\n    set: function set(value) {\n      this._addOnBlur = coerceBooleanProperty(value);\n    }\n    /** Whether the input is disabled. */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this._chipList && this._chipList.disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /** Whether the input is empty. */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this.inputElement.value;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._chipList.stateChanges.next();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.chipEnd.complete();\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      if (event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n          this._chipList._allowFocusEscape();\n        } // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n        // We focus the last chip on backspace only after the user has released the backspace button,\n        // and the input is empty (see behaviour in _keyup)\n\n\n        if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n          this._chipList._keyManager.setLastItemActive();\n\n          event.preventDefault();\n          return;\n        } else {\n          this._focusLastChipOnBackspace = false;\n        }\n      }\n\n      this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n\n  }, {\n    key: \"_keyup\",\n    value: function _keyup(event) {\n      // Allow user to move focus to chips next time he presses backspace\n      if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n        this._focusLastChipOnBackspace = true;\n        event.preventDefault();\n      }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      if (this.addOnBlur) {\n        this._emitChipEnd();\n      }\n\n      this.focused = false; // Blur the chip list if it is not focused\n\n      if (!this._chipList.focused) {\n        this._chipList._blur();\n      }\n\n      this._chipList.stateChanges.next();\n    }\n  }, {\n    key: \"_focus\",\n    value: function _focus() {\n      this.focused = true;\n      this._focusLastChipOnBackspace = this.empty;\n\n      this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n\n  }, {\n    key: \"_emitChipEnd\",\n    value: function _emitChipEnd(event) {\n      if (!this.inputElement.value && !!event) {\n        this._chipList._keydown(event);\n      }\n\n      if (!event || this._isSeparatorKey(event)) {\n        this.chipEnd.emit({\n          input: this.inputElement,\n          value: this.inputElement.value,\n          chipInput: this\n        });\n        event === null || event === void 0 ? void 0 : event.preventDefault();\n      }\n    }\n  }, {\n    key: \"_onInput\",\n    value: function _onInput() {\n      // Let chip list know whenever the value changes.\n      this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this.inputElement.focus(options);\n    }\n    /** Clears the input */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.inputElement.value = '';\n      this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n\n  }, {\n    key: \"_isSeparatorKey\",\n    value: function _isSeparatorKey(event) {\n      return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n  }]);\n\n  return MatChipInput;\n}();\n\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\n\nMatChipInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 5,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) {\n        return ctx._keyup($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    }\n  },\n  inputs: {\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMatChipInput.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_CHIPS_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatChipInput.propDecorators = {\n  chipList: [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  addOnBlur: [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  separatorKeyCodes: [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  chipEnd: [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(keyup)': '_keyup($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n        '[attr.aria-required]': '_chipList && _chipList.required || null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nvar ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\n\nvar MatChipsModule = function MatChipsModule() {\n  _classCallCheck(this, MatChipsModule);\n};\n\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n  return new (t || MatChipsModule)();\n};\n\nMatChipsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue: ɵ0\n  }],\n  imports: [[MatCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue: ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: function declarations() {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 }; //# sourceMappingURL=chips.js.map","map":{"version":3,"sources":["C:/projects/custom/angular12_table/node_modules/@angular/material/fesm2015/chips.js"],"names":["SPACE","BACKSPACE","DELETE","TAB","hasModifierKey","ENTER","InjectionToken","Directive","EventEmitter","ElementRef","NgZone","Optional","Inject","ChangeDetectorRef","Attribute","ContentChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Self","ContentChildren","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","RippleRenderer","MAT_RIPPLE_GLOBAL_OPTIONS","mixinErrorState","ErrorStateMatcher","MatCommonModule","coerceBooleanProperty","Platform","DOCUMENT","ANIMATION_MODULE_TYPE","Subject","merge","take","takeUntil","startWith","FocusKeyManager","Directionality","SelectionModel","NgForm","FormGroupDirective","NgControl","MatFormFieldControl","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","MatChipSelectionChange","source","selected","isUserInput","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","features","ɵɵProvidersFeature","provide","useExisting","ngDevMode","ɵsetClassMetadata","args","selector","host","providers","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","elementRef","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","emit","chip","_removeTriggerEvents","markForCheck","focus","next","removable","event","preventDefault","stopPropagation","keyCode","remove","toggleSelected","onStable","pipe","subscribe","run","MatChip_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","ɵɵlistener","MatChip_click_HostBindingHandler","$event","_handleClick","MatChip_keydown_HostBindingHandler","_handleKeydown","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","_blur","ɵɵattribute","ariaSelected","ɵɵclassProp","inputs","color","outputs","exportAs","ɵɵInheritDefinitionFeature","ctorParameters","decorators","String","propDecorators","MatChipRemove","_parentChip","nodeName","setAttribute","parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","_MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","nextUniqueId$1","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","empty","_syncChipsState","fn","_initializeSelection","writeValue","_chipInput","id","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","forEach","map","_keyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","updateErrorState","complete","_dropSubscriptions","inputElement","ids","_ariaDescribedby","join","_setSelectionByValue","isDisabled","_originatesFromChip","options","setFirstItemActive","_focusInput","target","contains","onKeydown","newChipIndex","Math","min","setActiveItem","index","_clearSelection","deselect","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","selectViaInteraction","select","skip","clear","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","toArray","indexOf","_isValidIndex","updateActiveItem","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","some","MatChipList_Factory","ɵcmp","ɵɵdefineComponent","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","_keydown","ɵɵhostProperty","role","required","errorState","compareWith","errorStateMatcher","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","descendants","None","OnPush","nextUniqueId","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_focusLastChipOnBackspace","setLastItemActive","_emitChipEnd","addOnBlur","_isSeparatorKey","input","chipInput","Set","has","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_keyup_HostBindingHandler","_keyup","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","_focus","MatChipInput_input_HostBindingHandler","_onInput","invalid","chipList","ɵɵNgOnChangesFeature","CHIP_DECLARATIONS","ɵ0","MatChipsModule","MatChipsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useValue","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }]\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._animationsDisabled ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatChip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MAT_CHIP_AVATAR]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_TRAILING_ICON]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_REMOVE]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }])] });\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }]\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this.inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._focusLastChipOnBackspace = this.empty;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) { return ctx._keyup($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(keyup)': '_keyup($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ], imports: [[MatCommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n//# sourceMappingURL=chips.js.map"]},"metadata":{},"sourceType":"module"}